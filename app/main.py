"""
FastAPI Application principale - Projet Futurisys
API de pr√©diction d'attrition des employ√©s avec mod√®le XGBoost
"""

from fastapi import FastAPI, HTTPException
from fastapi.middleware.cors import CORSMiddleware
from fastapi.responses import RedirectResponse
import uvicorn
import os
from contextlib import asynccontextmanager

from app.routers import health, predictions
from app.core.config import settings
from app.models.ml_model import MLModel

# Instance globale du mod√®le ML
ml_model = None

@asynccontextmanager
async def lifespan(app: FastAPI):
    """Gestionnaire du cycle de vie de l'application"""
    global ml_model
    
    # Startup: Chargement du mod√®le
    try:
        ml_model = MLModel()
        ml_model.load_model()
        app.state.ml_model = ml_model
        print("‚úÖ Mod√®le XGBoost charg√© avec succ√®s")
    except Exception as e:
        print(f"‚ùå Erreur lors du chargement du mod√®le: {e}")
        raise e
    
    yield
    
    # Shutdown: Nettoyage si n√©cessaire
    print("üõë Arr√™t de l'application")

# Configuration FastAPI
app = FastAPI(
    title="Futurisys ML API - Pr√©diction d'Attrition",
    description="""
    API de Machine Learning pour pr√©dire l'attrition des employ√©s.
    
    ## Fonctionnalit√©s
    
    * **Pr√©dictions individuelles** : Pr√©dire si un employ√© va quitter l'entreprise
    * **Pr√©dictions batch** : Traiter plusieurs employ√©s simultan√©ment
    * **Explicabilit√©** : Comprendre les facteurs de d√©cision
    * **Monitoring** : Suivi de la sant√© du mod√®le
    
    ## Mod√®le
    
    * **Algorithme** : XGBoost Classifier
    * **Variable cible** : a_quitte_l_entreprise (Oui/Non)
    * **Features** : 27 variables d'entr√©e (satisfaction, √©valuation, d√©mographie, etc.)
    """,
    version="1.0.0",
    contact={
        "name": "Futurisys ML Team",
        "email": "mounir.meknaci@gmail.com",
    },
    license_info={
        "name": "MIT License",
    },
    lifespan=lifespan
)

# Configuration CORS
app.add_middleware(
    CORSMiddleware,
    allow_origins=["*"],  # En production, sp√©cifier les domaines autoris√©s
    allow_credentials=True,
    allow_methods=["*"],
    allow_headers=["*"],
)

# Routes principales
app.include_router(health.router, prefix="/health", tags=["Health"])
app.include_router(predictions.router, prefix="/api/v1", tags=["Predictions"])

@app.get("/", include_in_schema=False)
async def root():
    """Redirection vers la documentation"""
    return RedirectResponse(url="/docs")

@app.get("/info", tags=["Info"])
async def get_api_info():
    """Informations g√©n√©rales sur l'API"""
    return {
        "project": "Projet5 ML Deployment",
        "client": "Futurisys",
        "model_type": "XGBoost Classifier",
        "prediction_target": "Employee Attrition (a_quitte_l_entreprise)",
        "features_count": 27,
        "version": "1.0.0",
        "environment": settings.ENVIRONMENT,
        "model_loaded": hasattr(app.state, 'ml_model') and app.state.ml_model is not None
    }

# Point d'entr√©e pour d√©veloppement local
if __name__ == "__main__":
    uvicorn.run(
        "app.main:app",
        host=settings.API_HOST,
        port=settings.API_PORT,
        reload=settings.DEBUG,
        log_level=settings.LOG_LEVEL.lower()
    )